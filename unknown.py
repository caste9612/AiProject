#! /usr/bin/env python
#
# GUI module generated by PAGE version 4.9
# In conjunction with Tcl version 8.6
#    Dec 31, 2017 11:22:17 AM
import  os
import pickle
from Bernoulli import bernoulliCompute
from Bernoulli import bernoulliTrain
from Multinomial import multinomialTrain
from Multinomial import multinomialCompute
from Utility import createVocoabulary

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = 0
except ImportError:
    import tkinter.ttk as ttk
    py3 = 1

import unknown_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = Tk()
    top = New_Toplevel_1 (root)
    unknown_support.init(root, top)
    root.mainloop()

w = None
def create_New_Toplevel_1(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel (root)
    top = New_Toplevel_1 (w)
    unknown_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_New_Toplevel_1():
    global w
    w.destroy()
    w = None

class New_Toplevel_1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#d9d9d9' # X11 color: 'gray85' 

        top.geometry("898x251+497+253")
        top.title("New Toplevel 1")
        top.configure(highlightcolor="black")



        self.Label1 = Label(top)
        self.Label1.place(relx=0.01, rely=0.04, height=58, width=116)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(text='''DataSet (path) :''')

        self.Entry1 = Entry(top)
        self.Entry1.place(relx=0.16, rely=0.12, relheight=0.08, relwidth=0.81)
        self.Entry1.configure(background="white")
        self.Entry1.configure(font="TkFixedFont")
        self.Entry1.configure(selectbackground="#c4c4c4")
        self.Entry1.configure(width=726)

        self.Label2 = Label(top)
        self.Label2.place(relx=0.0, rely=0.24, height=58, width=286)
        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(text='''Mode (Bernoulli = b / Multinomial = m) :''')
        self.Label2.configure(width=286)

        self.Label3 = Label(top)
        self.Label3.place(relx=0.0, rely=0.44, height=48, width=126)
        self.Label3.configure(activebackground="#f9f9f9")
        self.Label3.configure(text='''Train/Test (%):''')

        self.Entry2 = Entry(top)
        self.Entry2.place(relx=0.13, rely=0.48, relheight=0.12, relwidth=0.04)
        self.Entry2.configure(background="white")
        self.Entry2.configure(font="TkFixedFont")
        self.Entry2.configure(selectbackground="#c4c4c4")
        self.Entry2.configure(width=36)

        self.Label4 = Label(top)
        self.Label4.place(relx=0.0, rely=0.68, height=48, width=116)
        self.Label4.configure(text='''Nome test:''')
        self.Label4.configure(width=116)

        self.Entry3 = Entry(top)
        self.Entry3.place(relx=0.12, rely=0.72, relheight=0.12, relwidth=0.17)
        self.Entry3.configure(background="white")
        self.Entry3.configure(font="TkFixedFont")
        self.Entry3.configure(width=156)

        self.Entry4 = Entry(top)
        self.Entry4.place(relx=0.31, rely=0.32, relheight=0.08, relwidth=0.02)
        self.Entry4.configure(background="white")
        self.Entry4.configure(font="TkFixedFont")
        self.Entry4.configure(width=16)

        self.Button1 = Button(top,command = lambda :self.exe())
        self.Button1.place(relx=0.56, rely=0.4, height=116, width=327)
        self.Button1.configure(activebackground="#d9d9d9")
        self.Button1.configure(text='''Start''')
        self.Button1.configure(width=327)


    def exe(self):
        createMatrix(str(self.Entry1.get()), int(self.Entry2.get()), str(self.Entry3.get()), str(self.Entry4.get()))

def createMatrix(dir, percentage, name, mode):

    # Creo le liste dei file
    trainSet = []
    testSet = []

    subdirs = [x[0] for x in os.walk(dir)]
    for subdir in subdirs:
        if subdir != dir:
            testSet.append([])
            tmp = subdir.split("/")
            testSet[len(testSet)-1].append(tmp[len(tmp)-1])
            count = 0
            files = os.walk(subdir).next()[2]
            if (len(files) > 0):
                for file in files:
                    if count < ((percentage * len(files)) / 100):
                        trainSet.append(subdir + "/" + file)
                    else:
                        testSet[len(testSet)-1].append(subdir + "/" + file)
                    count += 1

    if os.path.isfile(name):
        with open(name, "rb") as fp:
            voc = pickle.load(fp)
    else:
        voc = createVocoabulary(trainSet)
        with open(name, "wb") as fp:
            pickle.dump(voc, fp)

    if mode == "b":
        if os.path.isfile(name + "tabB"):
            with open(name + "tabB", "rb") as fp:
                tab = pickle.load(fp)
        else:
            tab = bernoulliTrain(dir,voc,trainSet)
            with open(name + "tabB", "wb") as fp:
                pickle.dump(tab, fp)
    elif mode == "m":
        if os.path.isfile(name + "tabM"):
            with open(name + "tabM", "rb") as fp:
                tab = pickle.load(fp)
        else:
            tab = multinomialTrain(dir,voc,trainSet)
            with open(name + "tabM", "wb") as fp:
                pickle.dump(tab, fp)
    else:
            print "Errore"
            return

    print "Test start..."
    print ""



    cat = []
    predicted = []
    subdirs = [x[0] for x in os.walk(dir)]
    for subdir in subdirs:
        tmp2 = subdir.split("/")
        for i in range(len(testSet)):
            if testSet[i][0] == tmp2[len(tmp2)-1] :
                tmp = subdir.split("/")
                tmp1 = tmp[len(tmp)-1]
                cat.append(tmp1)
                predicted.append(tmp1)
                cat.append(len(testSet[i]))
                predicted.append(0)

    subdirs = [x[0] for x in os.walk(dir)]
    for subdir in subdirs:
        if subdir != dir:
            tmp = subdir.split("/")
            for i in range(len(testSet)):
                if tmp[len(tmp)-1] == testSet[i][0]:
                    for file in testSet[i]:
                        if os.path.isfile(file):
                            if mode == "b":
                                tmp1 = bernoulliCompute(file, dir, tab)
                            else:
                                tmp1 = multinomialCompute(file, dir, tab)
                            for i in range(0, len(predicted), 2):
                                if predicted[i] == tmp1:
                                    predicted[i + 1] += 1
            for i in range(0,len(cat),2):
                if cat[i] == tmp[len(tmp)-1]:
                    print cat[i] + " " + str(cat[i+1]-1)
                    print predicted
                    for j in range(1,len(predicted),2):
                        predicted[j] = 0


if __name__ == '__main__':
    vp_start_gui()



